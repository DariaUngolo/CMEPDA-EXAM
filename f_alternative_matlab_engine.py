import numpy as np
import pandas as pd
import matlab.engine
import sys
from pathlib import Path
import os

# Add the parent directory to sys.path to allow imports from the parent folder
sys.path.insert(0, str(Path(os.getcwd()).parent))

def feature_extractor(folder_path, atlas_file, atlas_txt, metadata_csv, output_csv_prefix):
    """
    Extracts feature means and standard deviations from brain image data using a MATLAB function.

    This function communicates with MATLAB to extract the mean and standard deviation values 
    from the image data in a given folder, based on a specified atlas. It then processes the 
    output from MATLAB, converts it to NumPy arrays, and organizes it into pandas DataFrames. 
    Additionally, it loads metadata about the image groups and returns the processed features 
    and group labels.

    Args:
        folder_path (str): Path to the folder containing the image data.
        atlas_file (str): Path to the atlas file used for the feature extraction.
        atlas_txt (str): Path to the text file containing atlas-related information.
        metadata_csv (str): Path to the CSV file containing metadata about the image groups.
        output_csv_prefix (str): Prefix for the output CSV file generated by the MATLAB function.

    Returns:
        tuple: A tuple containing:
            - df_mean (pandas.DataFrame): DataFrame containing the mean values of features.
            - df_std (pandas.DataFrame): DataFrame containing the standard deviation values of features.
            - group (pandas.Series): Series containing the group labels from the metadata.
    """
    
    # === 1. Start the MATLAB engine ===
    eng = matlab.engine.start_matlab()

    # Add the MATLAB path (modify as needed)
    #eng.addpath(r"C:\Users\daria\OneDrive\Desktop\CMEPDA-EXAM", nargout=0)
    eng.addpath(r"C:\Users\brand\OneDrive\Desktop\CMEPDA-EXAM", nargout=0)

    # Get the current MATLAB working directory
    current_folder = eng.pwd()

    # === 2. Call the MATLAB function to extract features ===
    mean, std = eng.f_feature_extractor_means_stds(folder_path, atlas_file, atlas_txt, output_csv_prefix, nargout=2)

    # Quit MATLAB engine after the operation is complete
    eng.quit()

    # === 3. Convert MATLAB arrays to NumPy arrays ===
    mean_array = np.asarray(mean)
    std_array = np.asarray(std)

    # === 4. Transpose arrays if necessary (maintaining correct shape) ===
    if mean_array.shape[0] < mean_array.shape[1]:
        mean_array = mean_array.T
    if std_array.shape[0] < std_array.shape[1]:
        std_array = std_array.T

    # === 5. Check if the first row contains headers or data ===
    data_start = 0
    if isinstance(mean_array[0, 0], str) and mean_array[0, 0].lower() in ["image", "id", ""]:
        data_start = 1  # First row contains headers

    if isinstance(std_array[0, 0], str) and std_array[0, 0].lower() in ["image", "id", ""]:
        data_start = 1  # First row contains headers

    # === 6. Create pandas DataFrames for mean and standard deviation values ===

    #colonna con indici delle ROI
    index_ROI = []
    with open(atlas_txt, 'r') as file:
        for line in file:
            columns = line.split('\t')  # Divide la riga in colonne basandosi sulle tabulazioni
            if len(columns) > 1:  # Assicurati che la riga abbia almeno 2 colonne
                index_ROI.append(columns[1].strip())  # Aggiungi la seconda colonna alla lista e rimuovi gli spazi bianchi e gli a capo
             
    # Create DataFrames for mean and std values
    df_mean = pd.DataFrame(mean_array[:, data_start :],
                           index=mean_array[:, 0],
                           columns=index_ROI)

    df_std = pd.DataFrame(std_array[:, data_start :],
                          index=std_array[:, 0],
                          columns=index_ROI)

    # === 7. Load metadata from CSV file ===
    df_group = pd.read_csv(metadata_csv, sep='\t')
    df_group.sort_values(by=[df_group.columns[0]], inplace=True)

    # === 8. Extract group labels (metadata) ===
    group = df_group.iloc[:, 1]
    #    # Select only the first two columns (ID and Group)
    #group2 = df_group.iloc[:, [0, 1]]  # Columns with ID and Group

    # === 9. Return results ===
    return df_mean, df_std, group