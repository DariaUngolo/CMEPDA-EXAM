function validate_all_rois(image_path, atlas_path, atlas_labels_txt, csv_prefix, image_index, intensity_threshold, tolerance)
%VALIDATE_ALL_ROIS Validates extracted ROI statistics against manual computation.
%
% This function compares the mean and standard deviation of voxel intensities
% for each ROI (Region of Interest) between the values in the output CSV files
% generated by `feature_extractor` and a manual recalculation from a NIfTI image.
%
% Inputs:
%   - image_path         : string. Path to the NIfTI image (e.g., a "smwc1" file).
%   - atlas_path         : string. Path to the NIfTI atlas file used for segmentation.
%   - atlas_labels_txt   : string. Path to a text file listing ROI IDs and names (format: ID<TAB>Name).
%   - csv_prefix         : string. Prefix of the CSV output from `feature_extractor`.
%                          The function will read: [csv_prefix '_mean.csv'] and [csv_prefix '_std.csv'].
%   - image_index        : integer. The row index of the image in the CSV files (1-based).
%   - intensity_threshold: double. Minimum voxel intensity to consider (to exclude background).
%                          Suggested: 1e-6.
%   - tolerance          : double. Numerical tolerance for differences (suggested: 1e-4).
%
% Output:
%   - Displays a detailed report of any discrepancies found between manual and CSV-computed ROI statistics.
%
% Example:
%   validate_all_rois('smwc1_subject01.nii', ...
%                     'lpba40.nii.gz', ...
%                     'lpba40_labelID.txt', ...
%                     'AD_results', 1, 1e-6, 1e-4);

    fprintf('Loading image and atlas...\n');
    img   = double(niftiread(image_path));
    atlas = double(niftiread(atlas_path));

    % Check that image and atlas have matching dimensions
    %if ~isequal(size(img), size(atlas))
        %error('Image and atlas dimensions do not match.');
    %end

    % Load ROI labels
    fid = fopen(atlas_labels_txt, 'r');
    roi_data = textscan(fid, '%d%s', 'Delimiter', '\t');
    fclose(fid);
    roi_ids   = roi_data{1};
    roi_names = roi_data{2};
    num_rois  = numel(roi_ids);

    % Load CSV tables
   mean_table = readtable(strcat(csv_prefix, '_mean.csv'), 'VariableNamingRule', 'preserve');
   std_table  = readtable(strcat(csv_prefix, '_std.csv'), 'VariableNamingRule', 'preserve');


    fprintf('\n--- ROI Validation Report ---\n');

    num_discrepancies = 0;

    for j = 1:num_rois
        roi_id   = roi_ids(j);
        roi_name = roi_names{j};
        mean_col = strcat("Mean_", roi_name);
        std_col  = strcat("Std_", roi_name);

        % Ensure the ROI columns exist in the tables
        if ~ismember(mean_col, mean_table.Properties.VariableNames) || ...
           ~ismember(std_col, std_table.Properties.VariableNames)
            fprintf('[!] ROI "%s" not found in CSV columns. Skipping.\n', roi_name);
            continue;
        end

        % Create mask and extract voxel intensities
        roi_mask = (atlas == roi_id);
        voxels = img(roi_mask);
        voxels = voxels(voxels > intensity_threshold); % Filter background

        if isempty(voxels)
            manual_mean = NaN;
            manual_std  = NaN;
        else
            manual_mean = mean(voxels);
            manual_std  = std(voxels);
        end

        % Extract corresponding values from CSV
        csv_mean = mean_table{image_index, mean_col};
        csv_std  = std_table{image_index, std_col};

        % Compute absolute differences
        delta_mean = abs(csv_mean - manual_mean);
        delta_std  = abs(csv_std  - manual_std);

        % Report if discrepancies exceed tolerance
        if delta_mean > tolerance || delta_std > tolerance
            fprintf('⚠️ ROI: %-25s | Δmean = %.6f | Δstd = %.6f\n', roi_name, delta_mean, delta_std);
            num_discrepancies = num_discrepancies + 1;
        end
    end

    fprintf('\nTotal ROIs with discrepancy > %.1e: %d out of %d\n', tolerance, num_discrepancies, num_rois);
    if num_discrepancies == 0
        disp('✅ All ROI values match within the specified tolerance.');
    end
end

image_path = "C:\Users\brand\OneDrive\Desktop\CMEPDA\progetto esame\data\smwc1AD-1.nii";
atlas_path = "C:\Users\brand\OneDrive\Desktop\CMEPDA\progetto esame\data\lpba40.spm5.avg152T1.gm.label.nii.gz";
atlas_labels_txt = "C:\Users\brand\OneDrive\Desktop\CMEPDA\progetto esame\data\lpba40_labelID.txt";
csv_prefix = "AD_results_trial";
image_index = 1;
intensity_threshold = 1e-6;
tolerance = 1e-8;

validate_all_rois(image_path, atlas_path, atlas_labels_txt, csv_prefix, image_index, intensity_threshold, tolerance)